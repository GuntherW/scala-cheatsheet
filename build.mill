import mill._, scalalib._

trait CommonSbtModule extends SbtModule:
  def scalaVersion  = Version.scala
  def scalacOptions = Seq(
    "-experimental"
  )

object core extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.catsCore,
    Dependency.catsEffectCps,
    Dependency.catsFree,
    Dependency.circeCore,
    Dependency.circeGeneric,
    Dependency.circeParser,
    Dependency.fs2Core,
    Dependency.fs2IO,
    Dependency.fs2ReactiveStreams,
    Dependency.jsonSchemaValidator,
    Dependency.logback,
    Dependency.monocle,
    Dependency.neotype,
    Dependency.refined,
    Dependency.resilience4j,
    Dependency.scalaParallelCollection,
    Dependency.scodec,
    Dependency.squants,
    Dependency.xstream,
    Dependency.xml,
    Dependency.zio,
    Dependency.jacksonCore,
    Dependency.jacksonScala,
  )

  object test extends SbtTests:
    def mvnDeps       = Seq(
      Dependency.mockito,
      Dependency.scalatest,
      Dependency.scalaCheck,
      Dependency.scalaMock,
      Dependency.testContainer
    )
    def testFramework = "org.scalatest.tools.Framework"

object config extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.pureConfig,
    Dependency.ciris,
    Dependency.toml
  )

object cucumber extends CommonSbtModule:
  object test extends SbtTests:
    def mvnDeps       = Seq(
      Dependency.cucumberScala,
      Dependency.cucumberJunit,
      Dependency.cucumberPico,
      Dependency.junitInterface,
      Dependency.junit,
    )
    def testFramework = "com.novocode.junit.JUnitFramework"

object database extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.doobieCore,
    Dependency.doobiePostgres,
    Dependency.doobieHirari,
    Dependency.duckdb,
    Dependency.magnum,
    Dependency.magnumpg,
    Dependency.pureConfig,
    Dependency.skunk,
    Dependency.scalasql,
    Dependency.scalasqlNamedTuples,
    Dependency.tyqu,
    Dependency.logback,
    Dependency.ox,
    Dependency.osLib,
    Dependency.postgres,
    Dependency.h2,
    Dependency.quillJdbc,
    Dependency.quillJdbcZio,
  )

object datatransformation extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.ducktape,
    Dependency.chimney,
  )

object direct extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.gears,
    Dependency.kyoCore,
    Dependency.kyoDirect,
    Dependency.kyoCache,
    Dependency.kyoStat,
    Dependency.kyoSttp,
    Dependency.kyoTapir,
    Dependency.ox,
    Dependency.tapirNettyServerSync,
    Dependency.sttpCore
  )

object json extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.avro4s,
    Dependency.borerCore,
    Dependency.borerCirce,
    Dependency.borerScodec,
    Dependency.borerDerivation,
    Dependency.circeCore,
    Dependency.circeGeneric,
    Dependency.circeParser,
    Dependency.jsoniter,
    Dependency.jsoniterMacros,
    Dependency.upickle,
    Dependency.zioJson,
  )

object macros extends CommonSbtModule:
  def forkArgs      = Seq("-Xmx4g")
  def scalacOptions = Seq(
    "-experimental",
    "-Xprint:postInlining", // Wichtiger output bei "compile", um zu sehen, ob/wie Inline funktioniert
    "-Xmax-inlines:100000"
  )
  def mvnDeps       = Seq(
    Dependency.postgres
  )

object magwire extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.macwire
  )

object magnolia extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.magnolia
  )

object munit extends CommonSbtModule:
  object test extends SbtTests:
    def mvnDeps       = Seq(
      Dependency.munit,
      Dependency.scalatest,
      Dependency.munitScalaCheck,
      Dependency.circeCore,
      Dependency.circeGeneric,
      Dependency.circeParser,
    )
    def testFramework = "munit.Framework"

object osLib extends CommonSbtModule:
  def forkArgs = Seq("-Xmx4g")

  def mvnDeps = Seq(
    Dependency.osLib
  )

object scalacheck extends CommonSbtModule:

  object test extends SbtTests:
    def mvnDeps       = Seq(
      Dependency.scalaCheck
    ) ++ Seq(
      Dependency.scalatest
    )
    def testFramework = "org.scalacheck.ScalaCheckFramework"

object zioKafka extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.zioKafka,
    Dependency.zioJson,
  )

object sttp extends CommonSbtModule:
  def mvnDeps = Seq(
    Dependency.jsoniterMacros,
    Dependency.jsoniter,
    Dependency.openTelemtry,
    Dependency.openTelemtryAutoConfigure,
    Dependency.sttpCore,
    Dependency.sttpBEZio,
    Dependency.sttpCirce,
    Dependency.sttpFs2,
    Dependency.sttpJsoniter,
    Dependency.sttpOpenTelemetry,
    Dependency.sttpsSlf4j,
    Dependency.sttpOAuth,
    Dependency.catsCore,
    Dependency.circeGeneric,
    Dependency.log4jApi,
    Dependency.log4jCore,
    Dependency.log4jSlf4jImpl,
  )

object Version:
  val akka                    = "2.8.8"
  val avro4s                  = "5.0.14"
  val aws                     = "2.173.4"
  val borer                   = "1.16.1"
  val caliban                 = "2.9.1"
  val catsEffectCps           = "0.5.0"
  val catsVersion             = "2.13.0"
  val catsConsole             = "0.8.1"
  val circeVersion            = "0.14.14"
  val cirisVersion            = "3.10.0"
  val chimney                 = "1.8.2"
  val doobie                  = "1.0.0-RC10"
  val duckdb                  = "1.4.0.0"
  val ducktape                = "0.2.10"
  val fs2                     = "3.12.2"
  val gatling                 = "3.13.1"
  val gears                   = "0.2.0"
  val h2                      = "2.3.232"
  val http4s                  = "0.23.30"
  val jackson                 = "2.20.0"
  val jwtHttp4s               = "2.0.2"
  val jwtScala                = "10.0.1"
  val jsonSchemaValidator     = "1.5.9"
  val jsoniter                = "2.37.11"
  val kafka                   = "3.9.0"
  val kyo                     = "0.19.0"
  val logback                 = "1.5.18"
  val log4j                   = "2.25.1"
  val macwire                 = "2.6.7"
  val magnolia                = "1.3.18"
  val magnum                  = "2.0.0-M2"
  val mongo                   = "5.2.1"
  val monocle                 = "3.3.0"
  val neotype                 = "0.3.25"
  val openTelemetry           = "1.54.0"
  val osLib                   = "0.11.5"
  val ox                      = "1.0.0"
  val postgres                = "42.7.7"
  val pureConfig              = "0.17.9"
  val pulsar4s                = "2.10.0"
  val quill                   = "4.8.6"
  val refined                 = "0.11.3"
  val resilience4j            = "2.3.0"
  val scala                   = "3.7.3"
  val scalaParallelCollection = "1.2.0"
  val scalasql                = "0.2.1"
  val scodec                  = "2.3.3"
  val skunk                   = "0.6.4"
  val sttp                    = "4.0.11"
  val sttpOAuth               = "0.18.0"
  val sttpOpenAi              = "0.2.6"
  val squants                 = "1.8.3"
  val tapir                   = "1.11.44"
  val toml                    = "0.3.0"
  val tyqu                    = "0.1.0"
  val upickle                 = "4.3.2"
  val xstream                 = "1.4.21"
  val xml                     = "2.4.0"
  val zio                     = "2.1.21"
  val zioJson                 = "0.7.44"
  val zioKafka                = "3.0.0"
  val zioHttp                 = "3.0.1"
  val zioPrelude              = "1.0.0-RC41"
  val zioSchema               = "1.5.0"
  val zioCli                  = "0.7.0"
  val zioOpenAI               = "0.4.1"

  // ScalaJS
  val scalaJsDom = "2.8.0"
  val uTest      = "0.8.4"

  // Test
  val cucumber        = "7.28.2"
  val cucumberScala   = "8.32.2"
  val junit           = "4.13.2"
  val junitInterface  = "0.13.3"
  val mockito         = "5.19.0"
  val munit           = "1.2.0"
  val munitScalaCheck = "1.2.0"
  val scalaTest       = "3.2.19"
  val scalaCheck      = "1.19.0"
  val scalaMock       = "7.5.0"
  val testContainer   = "0.43.0"
  val weaverCats      = "0.8.4"

object Dependency:
  val akka                      = mvn"com.typesafe.akka::akka-actor-typed:${Version.akka}"
  val avro4s                    = mvn"com.sksamuel.avro4s::avro4s-core:${Version.avro4s}"
  val awsCdk                    = mvn"software.amazon.awscdk:aws-cdk-lib:${Version.aws}"
  val borerCore                 = mvn"io.bullet::borer-core:${Version.borer}"
  val borerDerivation           = mvn"io.bullet::borer-derivation:${Version.borer}"
  val borerCirce                = mvn"io.bullet::borer-compat-circe:${Version.borer}"
  val borerScodec               = mvn"io.bullet::borer-compat-scodec:${Version.borer}"
  val calibanQuick              = mvn"com.github.ghostdogpr::caliban-quick:${Version.caliban}"
  val calibanClient             = mvn"com.github.ghostdogpr::caliban-client:${Version.caliban}"
  val catsCore                  = mvn"org.typelevel::cats-core:${Version.catsVersion}"
  val catsEffectCps             = mvn"org.typelevel::cats-effect-cps:${Version.catsEffectCps}"
  val catsFree                  = mvn"org.typelevel::cats-free:${Version.catsVersion}"
  val circeCore                 = mvn"io.circe::circe-core:${Version.circeVersion}"
  val circeGeneric              = mvn"io.circe::circe-generic:${Version.circeVersion}"
  val circeParser               = mvn"io.circe::circe-parser:${Version.circeVersion}"
  val ciris                     = mvn"is.cir::ciris:${Version.cirisVersion}"
  val cirisCirce                = mvn"is.cir::ciris-circe:${Version.cirisVersion}"
  val chimney                   = mvn"io.scalaland::chimney:${Version.chimney}"
  val doobieCore                = mvn"org.tpolecat::doobie-core:${Version.doobie}"
  val doobiePostgres            = mvn"org.tpolecat::doobie-postgres:${Version.doobie}"
  val doobieHirari              = mvn"org.tpolecat::doobie-hikari:${Version.doobie}"
  val duckdb                    = mvn"org.duckdb:duckdb_jdbc:${Version.duckdb}"
  val ducktape                  = mvn"io.github.arainko::ducktape:${Version.ducktape}"
  val fs2Core                   = mvn"co.fs2::fs2-core:${Version.fs2}"
  val fs2IO                     = mvn"co.fs2::fs2-io:${Version.fs2}"
  val fs2ReactiveStreams        = mvn"co.fs2::fs2-reactive-streams:${Version.fs2}"
  val gears                     = mvn"ch.epfl.lamp::gears:${Version.gears}"
  val h2                        = mvn"com.h2database:h2:${Version.h2}"
  val http4s                    = mvn"org.http4s::http4s-dsl:${Version.http4s}"
  val http4sEmberServer         = mvn"org.http4s::http4s-ember-server:${Version.http4s}"
  val http4sEmberClient         = mvn"org.http4s::http4s-ember-client:${Version.http4s}"
  val http4sCirce               = mvn"org.http4s::http4s-circe:${Version.http4s}"
  val http4sDsl                 = mvn"org.http4s::http4s-dsl:${Version.http4s}"
  val jacksonCore               = mvn"com.fasterxml.jackson.core:jackson-databind:${Version.jackson}"
  val jacksonScala              = mvn"com.fasterxml.jackson.module::jackson-module-scala:${Version.jackson}"
  val jsoniter                  = mvn"com.github.plokhotnyuk.jsoniter-scala::jsoniter-scala-core:${Version.jsoniter}"
  val jsoniterMacros            = mvn"com.github.plokhotnyuk.jsoniter-scala::jsoniter-scala-macros:${Version.jsoniter}"
  val jsonSchemaValidator       = mvn"com.networknt:json-schema-validator:${Version.jsonSchemaValidator}"
  val jwtHttp4s                 = mvn"dev.profunktor::http4s-jwt-auth:${Version.jwtHttp4s}"
  val jwtScala                  = mvn"com.github.jwt-scala::jwt-core:${Version.jwtScala}"
  val jwtCirce                  = mvn"com.github.jwt-scala::jwt-circe:${Version.jwtScala}"
  val kafkaClients              = mvn"org.apache.kafka:kafka-clients:${Version.kafka}"
  val kafkaStreams              = mvn"org.apache.kafka:kafka-streams:${Version.kafka}"
  val kafkaStreamsScala         = mvn"org.apache.kafka::kafka-streams-scala:${Version.kafka}"
  val kyoCore                   = mvn"io.getkyo::kyo-core:${Version.kyo}"
  val kyoDirect                 = mvn"io.getkyo::kyo-direct:${Version.kyo}"
  val kyoCache                  = mvn"io.getkyo::kyo-cache:${Version.kyo}"
  val kyoStat                   = mvn"io.getkyo::kyo-stats-otel:${Version.kyo}"
  val kyoSttp                   = mvn"io.getkyo::kyo-sttp:${Version.kyo}"
  val kyoTapir                  = mvn"io.getkyo::kyo-tapir:${Version.kyo}"
  val logback                   = mvn"ch.qos.logback:logback-classic:${Version.logback}"
  val log4jApi                  = mvn"org.apache.logging.log4j:log4j-api:${Version.log4j}"
  val log4jCore                 = mvn"org.apache.logging.log4j:log4j-core:${Version.log4j}"
  val log4jSlf4jImpl            = mvn"org.apache.logging.log4j:log4j-slf4j-impl:${Version.log4j}"
  val macwire                   = mvn"com.softwaremill.macwire::macros:${Version.macwire}"
  val magnolia                  = mvn"com.softwaremill.magnolia1_3::magnolia:${Version.magnolia}"
  val magnum                    = mvn"com.augustnagro::magnum:${Version.magnum}"
  val magnumpg                  = mvn"com.augustnagro::magnumpg:${Version.magnum}"
  val mongoDriverJava           = mvn"org.mongodb:mongodb-driver-sync:${Version.mongo}"
  val monocle                   = mvn"dev.optics::monocle-core:${Version.monocle}"
  val neotype                   = mvn"io.github.kitlangton::neotype:${Version.neotype}"
  val openTelemtry              = mvn"io.opentelemetry:opentelemetry-exporter-otlp:${Version.openTelemetry}"
  val openTelemtryAutoConfigure = mvn"io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${Version.openTelemetry}"
  val osLib                     = mvn"com.lihaoyi::os-lib:${Version.osLib}"
  val ox                        = mvn"com.softwaremill.ox::core:${Version.ox}"
  val postgres                  = mvn"org.postgresql:postgresql:${Version.postgres}"
  val pureConfig                = mvn"com.github.pureconfig::pureconfig-generic-scala3:${Version.pureConfig}"
  val pulsar4s                  = mvn"com.clever-cloud.pulsar4s::pulsar4s-core:${Version.pulsar4s}"
  val pulsar4sCirce             = mvn"com.clever-cloud.pulsar4s::pulsar4s-circe:${Version.pulsar4s}"
  val quillJdbc                 = mvn"io.getquill::quill-jdbc:${Version.quill}"
  val quillJdbcZio              = mvn"io.getquill::quill-jdbc-zio:${Version.quill}"
  val refined                   = mvn"eu.timepit::refined:${Version.refined}"
  val resilience4j              = mvn"io.github.resilience4j:resilience4j-all:${Version.resilience4j}"
  val scalaParallelCollection   = mvn"org.scala-lang.modules::scala-parallel-collections:${Version.scalaParallelCollection}"
  val scalaReflect              = mvn"org.scala-lang:scala-reflect:${Version.scala}"
  val scalasql                  = mvn"com.lihaoyi::scalasql:${Version.scalasql}"
  val scalasqlNamedTuples       = mvn"com.lihaoyi::scalasql-namedtuples:${Version.scalasql}"
  val scodec                    = mvn"org.scodec::scodec-core:${Version.scodec}"
  val skunk                     = mvn"org.tpolecat::skunk-core:${Version.skunk}"
  val sttpCore                  = mvn"com.softwaremill.sttp.client4::core:${Version.sttp}"
  val sttpCirce                 = mvn"com.softwaremill.sttp.client4::circe:${Version.sttp}"
  val sttpBEZio                 = mvn"com.softwaremill.sttp.client4::zio:${Version.sttp}"
  val sttpFs2                   = mvn"com.softwaremill.sttp.client4::fs2:${Version.sttp}"
  val sttpJsoniter              = mvn"com.softwaremill.sttp.client4::jsoniter:${Version.sttp}"
  val sttpsSlf4j                = mvn"com.softwaremill.sttp.client4::slf4j-backend:${Version.sttp}"
  val sttpOpenTelemetry         = mvn"com.softwaremill.sttp.client4::opentelemetry-backend:${Version.sttp}"
  val sttpOAuth                 = mvn"com.ocadotechnology::sttp-oauth2:${Version.sttpOAuth}"
  val sttpOpenAi                = mvn"com.softwaremill.sttp.openai::core:${Version.sttpOpenAi}"
  val squants                   = mvn"org.typelevel::squants:${Version.squants}"
  val tapirAwsLambda            = mvn"com.softwaremill.sttp.tapir::tapir-aws-lambda:${Version.tapir}"
  val tapirAwsCdk               = mvn"com.softwaremill.sttp.tapir::tapir-aws-cdk:${Version.tapir}"
  val tapirAwsSam               = mvn"com.softwaremill.sttp.tapir::tapir-aws-sam:${Version.tapir}"
  val tapirHttp4sServer         = mvn"com.softwaremill.sttp.tapir::tapir-http4s-server:${Version.tapir}"
  val tapirJsonCirce            = mvn"com.softwaremill.sttp.tapir::tapir-json-circe:${Version.tapir}"
  val tapirJdkHttp              = mvn"com.softwaremill.sttp.tapir::tapir-jdkhttp-server:${Version.tapir}"
  val tapirNettyFuture          = mvn"com.softwaremill.sttp.tapir::tapir-netty-server:${Version.tapir}"
  val tapirNettyServerSync      = mvn"com.softwaremill.sttp.tapir::tapir-netty-server-sync:${Version.tapir}"
  val tapirSwaggerUiBundle      = mvn"com.softwaremill.sttp.tapir::tapir-swagger-ui-bundle:${Version.tapir}"
  val tapirPrometheusMetrics    = mvn"com.softwaremill.sttp.tapir::tapir-prometheus-metrics:${Version.tapir}"
  val toml                      = mvn"com.indoorvivants::toml:${Version.toml}"
  val tyqu                      = mvn"ch.epfl.tyqu::tyqu:${Version.tyqu}"
  val upickle                   = mvn"com.lihaoyi::upickle:${Version.upickle}"
  val xstream                   = mvn"com.thoughtworks.xstream:xstream:${Version.xstream}"
  val xml                       = mvn"org.scala-lang.modules::scala-xml:${Version.xml}"
  val zio                       = mvn"dev.zio::zio:${Version.zio}"
  val zioKafka                  = mvn"dev.zio::zio-kafka:${Version.zioKafka}"
  val zioStreams                = mvn"dev.zio::zio-streams:${Version.zio}"
  val zioJson                   = mvn"dev.zio::zio-json:${Version.zioJson}"
  val zioPrelude                = mvn"dev.zio::zio-prelude:${Version.zioPrelude}"
  val zioSchema                 = mvn"dev.zio::zio-schema:${Version.zioSchema}"
  val zioSchemaJson             = mvn"dev.zio::zio-schema-json:${Version.zioSchema}"
  val zioSchemaBson             = mvn"dev.zio::zio-schema-bson:${Version.zioSchema}"
  val zioSchemaProtobuf         = mvn"dev.zio::zio-schema-protobuf:${Version.zioSchema}"
  val zioSchemaDerivation       = mvn"dev.zio::zio-schema-derivation:${Version.zioSchema}"
  val zioHttp                   = mvn"dev.zio::zio-http:${Version.zioHttp}"
  val zioCli                    = mvn"dev.zio::zio-cli:${Version.zioCli}"
  val zioOpenAI                 = mvn"dev.zio::zio-openai:${Version.zioOpenAI}"

  // test
  val cucumberScala       = mvn"io.cucumber::cucumber-scala:${Version.cucumberScala}"
  val cucumberJunit       = mvn"io.cucumber:cucumber-junit:${Version.cucumber}"
  val cucumberPico        = mvn"io.cucumber:cucumber-picocontainer:${Version.cucumber}"
  val junitInterface      = mvn"com.github.sbt:junit-interface:${Version.junitInterface}"
  val junit               = mvn"junit:junit:${Version.junit}"
  val gatlingCharts       = mvn"io.gatling.highcharts:gatling-charts-highcharts:${Version.gatling}"
  val gatling             = mvn"io.gatling:gatling-test-framework:${Version.gatling}"
  val mockito             = mvn"org.mockito:mockito-core:${Version.mockito}"
  val munit               = mvn"org.scalameta::munit:${Version.munit}"
  val munitScalaCheck     = mvn"org.scalameta::munit-scalacheck:${Version.munitScalaCheck}"
  val scalatest           = mvn"org.scalatest::scalatest:${Version.scalaTest}"
  val scalaCheck          = mvn"org.scalacheck::scalacheck:${Version.scalaCheck}"
  val scalaMock           = mvn"org.scalamock::scalamock:${Version.scalaMock}"
  val tapirSttpStubServer = mvn"com.softwaremill.sttp.tapir::tapir-sttp-stub-server:${Version.tapir}"
  val testContainer       = mvn"com.dimafeng::testcontainers-scala-scalatest:${Version.testContainer}"
  val testContainerMongo  = mvn"com.dimafeng::testcontainers-scala-mongodb:${Version.testContainer}"
  val weaverCats          = mvn"com.disneystreaming::weaver-cats:${Version.weaverCats}"
  val zioTest             = mvn"dev.zio::zio-test:${Version.zio}"
  val zioTestSbt          = mvn"dev.zio::zio-test-sbt:${Version.zio}"
  val zioTestJUnit        = mvn"dev.zio::zio-test-junit:${Version.zio}"
