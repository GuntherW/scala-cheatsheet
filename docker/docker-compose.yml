version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.2
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  kafka-connect:
    container_name: kafka-connect
#    image: confluentinc/cp-kafka-connect:7.2.1
#    image: confluentinc/kafka-connect-datagen:latest
    build:
      context: connect
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      CUB_CLASSPATH: '/usr/share/java/confluent-security/connect/*:/usr/share/java/kafka/*:/usr/share/java/cp-base-new/*'
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_PRODUCER_CLIENT_ID: "connect-worker-producer"
      CONNECT_GROUP_ID: compose-connect-group

      CONNECT_REST_PORT: 8083
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    volumes:
      - ./connect/postgres-source.json:/connect/postgres-source.json

  schemaregistry:
    image: confluentinc/cp-schema-registry:5.2.1
    restart: always
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    ports:
      - 8082:8081

  kowl:
    container_name: kowl
    image: rsmnarts/kowl:latest
    depends_on:
      - kafka-connect
    ports:
      - "7777:8080"
    environment:
      KAFKA_BROKERS: kafka:29092

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    deploy:
      resources:
        limits:
          memory: 4096M
    ports:
      - "5432:5432"
    expose:
      - "5432"
    env_file:
      - ./.env
    environment:
      JVM_OPT: '-Xms1G -Xmx3G'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: 'dottydb'

    volumes:
      - data:/var/lib/postgres/dottydb/data
      - "./sql:/docker-entrypoint-initdb.d"

    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]

volumes:
  data:
    driver: local